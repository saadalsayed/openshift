name: AI Release Notes Generator

on:
  # Trigger on new tags (version releases)
  push:
    tags:
      - 'v*'
      - 'release-*'
  
  # Trigger on Pull Request events
  pull_request:
    types:
      - closed        # When PR is merged or closed
      - opened        # When PR is first opened
      - synchronize   # When new commits are pushed to PR
    branches:
      - main
      - master
      - develop
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        type: string
      previous_tag:
        description: 'Previous tag to compare against (optional)'
        required: false
        type: string
      pr_number:
        description: 'PR number to analyze (for PR analysis mode)'
        required: false
        type: string
      mode:
        description: 'What type of analysis to run'
        required: true
        type: choice
        options:
          - 'tag-release'
          - 'pr-analysis'
        default: 'tag-release'

permissions:
  contents: write        # Create releases and read repository content
  pull-requests: write   # Read/write PR information and comments
  issues: write         # Create/update issues if needed
  models: read          # Access GitHub Models API

jobs:
  generate-notes:
    runs-on: ubuntu-latest
    # Skip if PR was closed without merging (unless analyzing open/sync events)
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true || github.event.action == 'opened' || github.event.action == 'synchronize'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git log
          
      - name: Setup variables
        id: setup
        run: |
          # Determine trigger type and set variables accordingly
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Triggered by Pull Request #${{ github.event.pull_request.number }}"
            TRIGGER_TYPE="pr"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
            PR_ACTION="${{ github.event.action }}"
            
            echo "trigger_type=pr" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
            echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
            echo "pr_action=$PR_ACTION" >> $GITHUB_OUTPUT
            
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MODE="${{ github.event.inputs.mode }}"
            
            if [[ "$MODE" == "pr-analysis" ]]; then
              TRIGGER_TYPE="pr"
              PR_NUMBER="${{ github.event.inputs.pr_number }}"
              echo "trigger_type=pr" >> $GITHUB_OUTPUT
              echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
              echo "pr_action=manual" >> $GITHUB_OUTPUT
            else
              TRIGGER_TYPE="release"
              TAG_NAME="${{ github.event.inputs.tag_name }}"
              PREVIOUS_TAG="${{ github.event.inputs.previous_tag }}"
              echo "trigger_type=release" >> $GITHUB_OUTPUT
              echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
              echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            fi
            
          else
            # Tag push
            TRIGGER_TYPE="release"
            TAG_NAME="${{ github.ref_name }}"
            PREVIOUS_TAG=""
            echo "trigger_type=release" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "previous_tag=" >> $GITHUB_OUTPUT
          fi
          
          echo "Event: ${{ github.event_name }}, Type: $TRIGGER_TYPE"

      - name: Find previous tag (for releases)
        id: prev_tag
        if: steps.setup.outputs.trigger_type == 'release'
        run: |
          TAG_NAME="${{ steps.setup.outputs.tag_name }}"
          PREVIOUS_TAG="${{ steps.setup.outputs.previous_tag }}"
          
          # Find previous tag if not provided
          if [[ -z "$PREVIOUS_TAG" ]]; then
            PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$TAG_NAME$" | head -n 1)
            if [[ -z "$PREVIOUS_TAG" ]]; then
              echo "No previous tag found, using initial commit"
              PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            fi
          fi
          
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Release: $TAG_NAME (from $PREVIOUS_TAG)"

      - name: Install gh-models extension
        run: |
          gh extension install https://github.com/github/gh-models
          gh extension list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather commit information
        id: commits
        run: |
          TRIGGER_TYPE="${{ steps.setup.outputs.trigger_type }}"
          
          if [[ "$TRIGGER_TYPE" == "pr" ]]; then
            # For PR: get commits in the PR
            PR_NUMBER="${{ steps.setup.outputs.pr_number }}"
            echo "Getting commits from PR #$PR_NUMBER"
            
            # Get PR commits using GitHub API
            gh pr view "$PR_NUMBER" \
              --json commits \
              --jq '.commits[] | "- \(.messageHeadline) (\(.author.login))"' \
              > commits_formatted.txt || echo "No commits found"
              
            # Also get the PR diff summary
            gh pr diff "$PR_NUMBER" \
              --name-only > changed_files.txt || echo "No files changed"
              
          else
            # For tag releases: get commits between tags
            TAG_NAME="${{ steps.setup.outputs.tag_name }}"
            PREVIOUS_TAG="${{ steps.prev_tag.outputs.previous_tag }}"
            echo "Getting commits from $PREVIOUS_TAG to $TAG_NAME"
            
            # Get detailed commit info
            git log --format="- %s (%an)" --no-merges "$PREVIOUS_TAG..$TAG_NAME" > commits_formatted.txt
          fi
          
          # Count commits
          COMMIT_COUNT=$(wc -l < commits_formatted.txt 2>/dev/null || echo "0")
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $COMMIT_COUNT commits"
          if [[ $COMMIT_COUNT -gt 0 ]]; then
            echo "--- Commits ---"
            cat commits_formatted.txt
            echo "--- End Commits ---"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather PR information
        id: prs
        run: |
          TRIGGER_TYPE="${{ steps.setup.outputs.trigger_type }}"
          
          if [[ "$TRIGGER_TYPE" == "pr" ]]; then
            # For PR trigger: get detailed info about the current PR
            PR_NUMBER="${{ steps.setup.outputs.pr_number }}"
            echo "Getting detailed info for PR #$PR_NUMBER"
            
            gh pr view "$PR_NUMBER" \
              --json number,title,body,author,labels,reviewDecision,mergeable,additions,deletions \
              --jq '{
                number: .number,
                title: .title,
                body: .body,
                author: .author.login,
                labels: [.labels[].name],
                reviewDecision: .reviewDecision,
                mergeable: .mergeable,
                additions: .additions,
                deletions: .deletions
              }' > current_pr.json
            
            # Format PR info
            echo "- #$PR_NUMBER: $(gh pr view "$PR_NUMBER" --json title --jq '.title') (by @$(gh pr view "$PR_NUMBER" --json author --jq '.author.login'))" > prs_formatted.txt
            
            PR_COUNT=1
            
          else
            # For tag releases: get merged PRs in the date range
            TAG_NAME="${{ steps.setup.outputs.tag_name }}"
            PREVIOUS_TAG="${{ steps.prev_tag.outputs.previous_tag }}"
            SINCE_DATE=$(git log -1 --format="%ai" "$PREVIOUS_TAG" 2>/dev/null || echo "1 month ago")
            
            echo "Getting PRs merged since: $SINCE_DATE"
            
            gh pr list \
              --state merged \
              --limit 50 \
              --json number,title,body,author,mergedAt \
              --jq '.[] | select(.mergedAt >= "'"$(date -d "$SINCE_DATE" -Iseconds 2>/dev/null || date -Iseconds -d "$SINCE_DATE")"'") | "- #\(.number): \(.title) (by @\(.author.login))"' \
              > prs_formatted.txt || echo ""
              
            PR_COUNT=$(wc -l < prs_formatted.txt 2>/dev/null || echo "0")
          fi
          
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $PR_COUNT PRs"
          if [[ $PR_COUNT -gt 0 ]]; then
            echo "--- PRs ---"
            cat prs_formatted.txt
            echo "--- End PRs ---"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create context for AI
        id: context
        run: |
          TRIGGER_TYPE="${{ steps.setup.outputs.trigger_type }}"
          
          {
            if [[ "$TRIGGER_TYPE" == "pr" ]]; then
              PR_NUMBER="${{ steps.setup.outputs.pr_number }}"
              echo "# Pull Request Analysis for PR #$PR_NUMBER"
              echo ""
              echo "## Pull Request Information"
              echo "- Repository: ${{ github.repository }}"
              echo "- PR Number: #$PR_NUMBER"
              echo "- Base Branch: ${{ steps.setup.outputs.base_branch }}"
              echo "- Head Branch: ${{ steps.setup.outputs.head_branch }}"
              echo "- Action: ${{ steps.setup.outputs.pr_action }}"
              echo ""
              
              # Add PR details if available
              if [[ -f current_pr.json ]]; then
                echo "## PR Details"
                echo "- Title: $(cat current_pr.json | jq -r '.title')"
                echo "- Author: @$(cat current_pr.json | jq -r '.author')"
                echo "- Labels: $(cat current_pr.json | jq -r '.labels | join(", ")')"
                echo "- Lines Added: $(cat current_pr.json | jq -r '.additions // "N/A"')"
                echo "- Lines Deleted: $(cat current_pr.json | jq -r '.deletions // "N/A"')"
                echo "- Review Status: $(cat current_pr.json | jq -r '.reviewDecision // "PENDING"')"
                echo ""
                
                PR_BODY=$(cat current_pr.json | jq -r '.body // ""')
                if [[ -n "$PR_BODY" && "$PR_BODY" != "null" ]]; then
                  echo "## PR Description"
                  echo "$PR_BODY"
                  echo ""
                fi
              fi
              
            else
              TAG_NAME="${{ steps.setup.outputs.tag_name }}"
              PREVIOUS_TAG="${{ steps.prev_tag.outputs.previous_tag }}"
              echo "# Release Context for $TAG_NAME"
              echo ""
              echo "## Repository Information"
              echo "- Repository: ${{ github.repository }}"
              echo "- Release Tag: $TAG_NAME"
              echo "- Previous Tag: $PREVIOUS_TAG"
            fi
            
            echo "- Commits: ${{ steps.commits.outputs.commit_count }}"
            echo "- Pull Requests: ${{ steps.prs.outputs.pr_count }}"
            echo ""
            
            if [[ ${{ steps.commits.outputs.commit_count }} -gt 0 ]]; then
              echo "## Commits"
              cat commits_formatted.txt
              echo ""
            fi
            
            if [[ ${{ steps.prs.outputs.pr_count }} -gt 0 ]]; then
              if [[ "$TRIGGER_TYPE" == "pr" ]]; then
                echo "## Current Pull Request"
              else
                echo "## Merged Pull Requests"
              fi
              cat prs_formatted.txt
              echo ""
            fi
            
            # Add changed files for PR analysis
            if [[ "$TRIGGER_TYPE" == "pr" && -f changed_files.txt ]]; then
              FILE_COUNT=$(wc -l < changed_files.txt 2>/dev/null || echo "0")
              if [[ $FILE_COUNT -gt 0 ]]; then
                echo "## Changed Files ($FILE_COUNT files)"
                cat changed_files.txt | head -20
                if [[ $FILE_COUNT -gt 20 ]]; then
                  echo "... and $((FILE_COUNT - 20)) more files"
                fi
                echo ""
              fi
            fi
            
          } > context.txt
          
          echo "--- Context Created ---"
          head -50 context.txt
          echo "--- End Context Preview ---"

      - name: Generate AI analysis
        id: ai
        run: |
          TRIGGER_TYPE="${{ steps.setup.outputs.trigger_type }}"
          
          # Create different system prompts based on trigger type
          if [[ "$TRIGGER_TYPE" == "pr" ]]; then
            cat > system_prompt.txt << 'EOF'
You are an expert code reviewer and technical writer analyzing a Pull Request.

Your task is to create a comprehensive PR summary that helps reviewers and team members understand the changes.

Guidelines for PR Analysis:
1. Summarize the main purpose and goals of the PR in 2-3 sentences
2. List key changes organized by category (Features, Fixes, Refactoring, etc.)
3. Identify potential areas of concern, risk, or complexity
4. Note any breaking changes or API modifications prominently
5. Mention testing implications or requirements
6. Highlight dependencies or related changes
7. Use clear, technical language appropriate for developers
8. Structure with clear sections: Summary, Key Changes, Impact & Risks, Review Notes
9. Keep it comprehensive but scannable
10. Include specific file areas affected if significant

Format the output in clean Markdown suitable for a GitHub PR comment.
Focus on what reviewers need to know to effectively review this PR.
EOF
          else
            cat > system_prompt.txt << 'EOF'
You are an expert technical writer creating release notes for a software project.

Your task is to analyze commits and pull requests to create professional, user-friendly release notes.

Guidelines for Release Notes:
1. Group changes into logical categories: Features, Bug Fixes, Improvements, Dependencies, Documentation, Security, etc.
2. Use clear, user-focused language (avoid internal jargon)
3. Focus on user/developer impact, not implementation details
4. Include PR/issue numbers when available: (#123)
5. Use bullet points with consistent formatting
6. Highlight breaking changes prominently with ⚠️ 
7. Keep descriptions concise but informative
8. Use past tense (e.g., "Added", "Fixed", "Updated")
9. Order categories by importance: Features, Fixes, Improvements, etc.
10. If no significant changes, create brief maintenance release note

Format as clean Markdown with ## headers for categories.
Make it scan-friendly with consistent bullet formatting.
EOF
          fi
          
          # Generate analysis using appropriate prompt
          if [[ "$TRIGGER_TYPE" == "pr" ]]; then
            PROMPT="Please analyze this Pull Request and create a comprehensive summary for reviewers:"
          else
            PROMPT="Please generate professional release notes from the following information:"
          fi
          
          # Generate using AI
          cat context.txt | gh models run openai/gpt-4o \
            --system-prompt "$(cat system_prompt.txt)" \
            "$PROMPT" \
            > ai_output.md
          
          echo "--- Generated Output ---"
          cat ai_output.md
          echo "--- End Output ---"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle PR analysis
        if: steps.setup.outputs.trigger_type == 'pr'
        run: |
          PR_NUMBER="${{ steps.setup.outputs.pr_number }}"
          PR_ACTION="${{ steps.setup.outputs.pr_action }}"
          
          # Create formatted comment
          {
            echo "## 🤖 AI-Generated PR Analysis"
            echo ""
            echo "_Analysis generated on $(date) for PR action: $PR_ACTION_"
            echo ""
            cat ai_output.md
            echo ""
            echo "---"
            echo "<sub>Generated by GitHub Actions • [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>"
          } > pr_comment.md
          
          # For different PR actions, handle differently
          if [[ "$PR_ACTION" == "opened" ]]; then
            # Post initial analysis comment
            gh pr comment "$PR_NUMBER" --body-file pr_comment.md
            echo "Posted initial PR analysis comment"
            
          elif [[ "$PR_ACTION" == "synchronize" ]]; then
            # Post update comment (or could edit existing one)
            {
              echo "## 🔄 Updated PR Analysis"
              echo ""
              echo "_Updated analysis after new commits on $(date)_"
              echo ""
              cat ai_output.md
            } > pr_update.md
            gh pr comment "$PR_NUMBER" --body-file pr_update.md
            echo "Posted updated PR analysis"
            
          elif [[ "$PR_ACTION" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # For merged PRs, just log (release notes will be generated on tag)
            echo "PR merged - release notes will be generated on next tag"
            
          else
            # For manual or other triggers
            gh pr comment "$PR_NUMBER" --body-file pr_comment.md
            echo "Posted manual PR analysis"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle release creation
        if: steps.setup.outputs.trigger_type == 'release'
        run: |
          TAG_NAME="${{ steps.setup.outputs.tag_name }}"
          
          # Create final release notes
          {
            echo "# Release $TAG_NAME"
            echo ""
            cat ai_output.md
            echo ""
            echo "---"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.prev_tag.outputs.previous_tag }}...$TAG_NAME"
            echo ""
            echo "_Release notes generated with AI assistance on $(date)_"
          } > release_notes.md
          
          # Validate content
          if [[ ! -s release_notes.md ]]; then
            echo "Error: Generated release notes are empty"
            exit 1
          fi
          
          # Create or update GitHub release
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Release already exists, updating..."
            gh release edit "$TAG_NAME" --notes-file release_notes.md
          else
            echo "Creating new release..."
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes-file release_notes.md \
              --draft=false \
              --latest
          fi
          
          RELEASE_URL=$(gh release view "$TAG_NAME" --json url --jq '.url')
          echo "Release created/updated: $RELEASE_URL"
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        if: steps.setup.outputs.trigger_type == 'release'
        run: |
          if [[ -f CHANGELOG.md ]]; then
            echo "Updating CHANGELOG.md..."
            
            # Backup existing changelog
            cp CHANGELOG.md CHANGELOG.md.bak
            
            # Create new changelog with latest release at top
            {
              echo "# Changelog"
              echo ""
              cat ai_output.md
              echo ""
              echo "---"
              echo ""
              # Add existing content (skip first "# Changelog" line if present)
              if grep -q "^# Changelog" CHANGELOG.md.bak; then
                tail -n +3 CHANGELOG.md.bak
              else
                cat CHANGELOG.md.bak
              fi
            } > CHANGELOG.md
            
            # Commit if there are changes
            if ! git diff --quiet CHANGELOG.md; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add CHANGELOG.md
              git commit -m "Update CHANGELOG.md for ${{ steps.setup.outputs.tag_name }}"
              git push
              echo "CHANGELOG.md updated and committed"
            else
              echo "No changes to CHANGELOG.md"
            fi
          else
            echo "No CHANGELOG.md found, skipping update"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          TRIGGER_TYPE="${{ steps.setup.outputs.trigger_type }}"
          
          echo "## Workflow Complete! ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$TRIGGER_TYPE" == "pr" ]]; then
            echo "- **Type**: Pull Request Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number**: #${{ steps.setup.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: ${{ steps.setup.outputs.pr_action }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commits Analyzed**: ${{ steps.commits.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Type**: Release Notes Generation" >> $GITHUB_STEP_SUMMARY
            echo "- **Release**: ${{ steps.setup.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Commits Analyzed**: ${{ steps.commits.outputs.commit_count }}" >> $GITHUB_STEP_SUMMARY
            if [[ -n "${{ steps.handle_release.outputs.release_url }}" ]]; then
              echo "- **Release URL**: ${{ steps.handle_release.outputs.release_url }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Content Preview:" >> $GITHUB_STEP_SUMMARY
          echo '```markdown' >> $GITHUB_STEP_SUMMARY
          head -20 ai_output.md >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Save artifacts for debugging
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-analysis-artifacts-${{ github.run_number }}
          path: |
            *.txt
            *.md
            *.json
          retention-days: 30